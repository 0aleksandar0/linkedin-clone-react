{"ast":null,"code":"import { auth, provider, storage } from \"../firebase\";\nimport db from \"../firebase\";\nimport { SET_USER, SET_LOADING_STATUS, GET_ARTICLES } from \"./actionType\";\nexport const setUser = payload => ({\n  //setUser takes a payload\n  type: SET_USER,\n  user: payload // is setted to whatever the payload is\n\n});\nexport const setLoading = status => ({\n  type: SET_LOADING_STATUS,\n  status: status // status is gonna be whatever was passed into status\n\n});\nexport const getArticles = payload => ({\n  type: GET_ARTICLES,\n  payload: payload\n});\nexport function signInAPI() {\n  return dispatch => {\n    auth.signInWithPopup(provider).then(payload => {\n      dispatch(setUser(payload.user)); //payload is all of the user details -> dispatched to SET_USER\n    }).catch(error => alert(error.message));\n  };\n}\nexport function getUserAuth() {\n  return dispatch => {\n    auth.onAuthStateChanged(async user => {\n      if (user) {\n        dispatch(setUser(user));\n      }\n    });\n  };\n}\nexport function signOutAPI() {\n  return dispatch => {\n    auth.signOut().then(() => {\n      dispatch(setUser(null));\n    }).catch(error => {\n      console.log(error.message);\n    });\n  };\n}\nexport function postArticleAPI(payload) {\n  //is used to upload the image\n  return dispatch => {\n    dispatch(setLoading(true));\n\n    if (payload.image != \"\") {\n      const upload = storage.ref(`images/${payload.image.name}`).put(payload.image); //payload is the contents/message of a action\n\n      upload.on(\"state_changed\", snapshot => {\n        const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100; //for making the loading bar\n\n        console.log(`Progress: ${progress}%`);\n\n        if (snapshot.state === \"RUNNING\") {\n          console.log(`Progress: ${progress}%`);\n        }\n      }, error => console.log(error.code), async () => {\n        const downloadURL = await upload.snapshot.ref.getDownloadURL();\n        db.collection(\"articles\").add({\n          actor: {\n            description: payload.user.email,\n            title: payload.user.displayName,\n            date: payload.timestamp,\n            image: payload.user.photoURL\n          },\n          video: payload.video,\n          sharedImg: downloadURL,\n          comments: 0,\n          description: payload.description\n        });\n        dispatch(setLoading(false));\n      });\n    } else if (payload.video) {\n      db.collection(\"articles\").add({\n        actor: {\n          description: payload.user.email,\n          title: payload.user.displayName,\n          date: payload.timestamp,\n          image: payload.user.photoURL\n        },\n        video: payload.video,\n        sharedImg: \"\",\n        comments: 0,\n        description: payload.description\n      });\n      dispatch(setLoading(false));\n    }\n  };\n}\nexport function getArticlesAPI() {\n  return dispatch => {\n    let payload;\n    db.collection(\"articles\").orderBy(\"actor.date\", \"desc\").onSnapshot(snapshot => {\n      //read data from firebase\n      payload = snapshot.docs.map(doc => doc.data()); // Put all documents that were retrieved from firebase in an array\n\n      console.log(payload);\n    });\n  };\n}","map":{"version":3,"sources":["C:/Users/Nutzer/Desktop/react/linkedin-clone/src/actions/index.js"],"names":["auth","provider","storage","db","SET_USER","SET_LOADING_STATUS","GET_ARTICLES","setUser","payload","type","user","setLoading","status","getArticles","signInAPI","dispatch","signInWithPopup","then","catch","error","alert","message","getUserAuth","onAuthStateChanged","signOutAPI","signOut","console","log","postArticleAPI","image","upload","ref","name","put","on","snapshot","progress","bytesTransferred","totalBytes","state","code","downloadURL","getDownloadURL","collection","add","actor","description","email","title","displayName","date","timestamp","photoURL","video","sharedImg","comments","getArticlesAPI","orderBy","onSnapshot","docs","map","doc","data"],"mappings":"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","sourcesContent":["import { auth, provider, storage } from \"../firebase\";\r\nimport db from \"../firebase\";\r\nimport { SET_USER, SET_LOADING_STATUS, GET_ARTICLES } from \"./actionType\";\r\n\r\nexport const setUser = (payload) => ({\r\n  //setUser takes a payload\r\n  type: SET_USER,\r\n  user: payload, // is setted to whatever the payload is\r\n});\r\n\r\nexport const setLoading = (status) => ({\r\n  type: SET_LOADING_STATUS,\r\n  status: status, // status is gonna be whatever was passed into status\r\n});\r\n\r\nexport const getArticles = (payload) => ({\r\n  type: GET_ARTICLES,\r\n  payload: payload,\r\n});\r\n\r\nexport function signInAPI() {\r\n  return (dispatch) => {\r\n    auth\r\n      .signInWithPopup(provider)\r\n      .then((payload) => {\r\n        dispatch(setUser(payload.user)); //payload is all of the user details -> dispatched to SET_USER\r\n      })\r\n      .catch((error) => alert(error.message));\r\n  };\r\n}\r\n\r\nexport function getUserAuth() {\r\n  return (dispatch) => {\r\n    auth.onAuthStateChanged(async (user) => {\r\n      if (user) {\r\n        dispatch(setUser(user));\r\n      }\r\n    });\r\n  };\r\n}\r\n\r\nexport function signOutAPI() {\r\n  return (dispatch) => {\r\n    auth\r\n      .signOut()\r\n      .then(() => {\r\n        dispatch(setUser(null));\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.message);\r\n      });\r\n  };\r\n}\r\n\r\nexport function postArticleAPI(payload) {\r\n  //is used to upload the image\r\n\r\n  return (dispatch) => {\r\n    dispatch(setLoading(true));\r\n    if (payload.image != \"\") {\r\n      const upload = storage\r\n        .ref(`images/${payload.image.name}`)\r\n        .put(payload.image); //payload is the contents/message of a action\r\n      upload.on(\r\n        \"state_changed\",\r\n        (snapshot) => {\r\n          const progress =\r\n            (snapshot.bytesTransferred / snapshot.totalBytes) * 100; //for making the loading bar\r\n\r\n          console.log(`Progress: ${progress}%`);\r\n          if (snapshot.state === \"RUNNING\") {\r\n            console.log(`Progress: ${progress}%`);\r\n          }\r\n        },\r\n        (error) => console.log(error.code),\r\n        async () => {\r\n          const downloadURL = await upload.snapshot.ref.getDownloadURL();\r\n          db.collection(\"articles\").add({\r\n            actor: {\r\n              description: payload.user.email,\r\n              title: payload.user.displayName,\r\n              date: payload.timestamp,\r\n              image: payload.user.photoURL,\r\n            },\r\n            video: payload.video,\r\n            sharedImg: downloadURL,\r\n            comments: 0,\r\n            description: payload.description,\r\n          });\r\n          dispatch(setLoading(false));\r\n        }\r\n      );\r\n    } else if (payload.video) {\r\n      db.collection(\"articles\").add({\r\n        actor: {\r\n          description: payload.user.email,\r\n          title: payload.user.displayName,\r\n          date: payload.timestamp,\r\n          image: payload.user.photoURL,\r\n        },\r\n        video: payload.video,\r\n        sharedImg: \"\",\r\n        comments: 0,\r\n        description: payload.description,\r\n      });\r\n      dispatch(setLoading(false));\r\n    }\r\n  };\r\n}\r\n\r\nexport function getArticlesAPI() {\r\n  return (dispatch) => {\r\n    let payload;\r\n    db.collection(\"articles\")\r\n      .orderBy(\"actor.date\", \"desc\")\r\n      .onSnapshot((snapshot) => {\r\n        //read data from firebase\r\n        payload = snapshot.docs.map((doc) => doc.data()); // Put all documents that were retrieved from firebase in an array\r\n        console.log(payload);\r\n      });\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}