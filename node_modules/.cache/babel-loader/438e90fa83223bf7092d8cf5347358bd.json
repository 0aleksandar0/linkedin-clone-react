{"ast":null,"code":"import { auth, provider, storage } from \"../firebase\";\nimport db from \"../firebase\";\nimport { SET_USER, SET_LOADING_STATUS } from \"./actionType\";\nexport const setUser = payload => ({\n  //setUser takes a payload\n  type: SET_USER,\n  user: payload // is setted to whatever the payload is\n\n});\nexport const setLoading = state => ({\n  type: SET_USER,\n  state: state\n});\nexport function signInAPI() {\n  return dispatch => {\n    auth.signInWithPopup(provider).then(payload => {\n      dispatch(setUser(payload.user)); //payload is all of the user details -> dispatched to SET_USER\n    }).catch(error => alert(error.message));\n  };\n}\nexport function getUserAuth() {\n  return dispatch => {\n    auth.onAuthStateChanged(async user => {\n      if (user) {\n        dispatch(setUser(user));\n      }\n    });\n  };\n}\nexport function signOutAPI() {\n  return dispatch => {\n    auth.signOut().then(() => {\n      dispatch(setUser(null));\n    }).catch(error => {\n      console.log(error.message);\n    });\n  };\n}\nexport function postArticleAPI(payload) {\n  //is used to upload the image\n  return dispatch => {\n    if (payload.image != \"\") {\n      const upload = storage.ref(`images/${payload.image.name}`).put(payload.image); //payload is the contents/message of a action\n\n      upload.on(\"state_changed\", snapshot => {\n        const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100; //for making the loading bar\n\n        console.log(`Progress: ${progress}%`);\n\n        if (snapshot.state === \"RUNNING\") {\n          console.log(`Progress: ${progress}%`);\n        }\n      }, error => console.log(error.code), async () => {\n        const downloadURL = await upload.snapshot.ref.getDownloadURL();\n        db.collection(\"articles\").add({\n          actor: {\n            description: payload.user.email,\n            title: payload.user.displayName,\n            date: payload.timestamp,\n            image: payload.user.photoURL\n          },\n          video: payload.video,\n          sharedImg: downloadURL,\n          comments: 0,\n          description: payload.description\n        });\n      });\n    } else if (payload.video) {\n      db.collection(\"articles\").add({\n        actor: {\n          description: payload.user.email,\n          title: payload.user.displayName,\n          date: payload.timestamp,\n          image: payload.user.photoURL\n        },\n        video: payload.video,\n        sharedImg: \"\",\n        comments: 0,\n        description: payload.description\n      });\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/Nutzer/Desktop/react/linkedin-clone/src/actions/index.js"],"names":["auth","provider","storage","db","SET_USER","SET_LOADING_STATUS","setUser","payload","type","user","setLoading","state","signInAPI","dispatch","signInWithPopup","then","catch","error","alert","message","getUserAuth","onAuthStateChanged","signOutAPI","signOut","console","log","postArticleAPI","image","upload","ref","name","put","on","snapshot","progress","bytesTransferred","totalBytes","code","downloadURL","getDownloadURL","collection","add","actor","description","email","title","displayName","date","timestamp","photoURL","video","sharedImg","comments"],"mappings":"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","sourcesContent":["import { auth, provider, storage } from \"../firebase\";\r\nimport db from \"../firebase\";\r\nimport { SET_USER, SET_LOADING_STATUS } from \"./actionType\";\r\n\r\nexport const setUser = (payload) => ({\r\n  //setUser takes a payload\r\n  type: SET_USER,\r\n  user: payload, // is setted to whatever the payload is\r\n});\r\n\r\nexport const setLoading = (state) => ({\r\n  type: SET_USER,\r\n  state: state,\r\n});\r\n\r\nexport function signInAPI() {\r\n  return (dispatch) => {\r\n    auth\r\n      .signInWithPopup(provider)\r\n      .then((payload) => {\r\n        dispatch(setUser(payload.user)); //payload is all of the user details -> dispatched to SET_USER\r\n      })\r\n      .catch((error) => alert(error.message));\r\n  };\r\n}\r\n\r\nexport function getUserAuth() {\r\n  return (dispatch) => {\r\n    auth.onAuthStateChanged(async (user) => {\r\n      if (user) {\r\n        dispatch(setUser(user));\r\n      }\r\n    });\r\n  };\r\n}\r\n\r\nexport function signOutAPI() {\r\n  return (dispatch) => {\r\n    auth\r\n      .signOut()\r\n      .then(() => {\r\n        dispatch(setUser(null));\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.message);\r\n      });\r\n  };\r\n}\r\n\r\nexport function postArticleAPI(payload) {\r\n  //is used to upload the image\r\n\r\n  return (dispatch) => {\r\n    if (payload.image != \"\") {\r\n      const upload = storage\r\n        .ref(`images/${payload.image.name}`)\r\n        .put(payload.image); //payload is the contents/message of a action\r\n      upload.on(\r\n        \"state_changed\",\r\n        (snapshot) => {\r\n          const progress =\r\n            (snapshot.bytesTransferred / snapshot.totalBytes) * 100; //for making the loading bar\r\n\r\n          console.log(`Progress: ${progress}%`);\r\n          if (snapshot.state === \"RUNNING\") {\r\n            console.log(`Progress: ${progress}%`);\r\n          }\r\n        },\r\n        (error) => console.log(error.code),\r\n        async () => {\r\n          const downloadURL = await upload.snapshot.ref.getDownloadURL();\r\n          db.collection(\"articles\").add({\r\n            actor: {\r\n              description: payload.user.email,\r\n              title: payload.user.displayName,\r\n              date: payload.timestamp,\r\n              image: payload.user.photoURL,\r\n            },\r\n            video: payload.video,\r\n            sharedImg: downloadURL,\r\n            comments: 0,\r\n            description: payload.description,\r\n          });\r\n        }\r\n      );\r\n    } else if (payload.video) {\r\n      db.collection(\"articles\").add({\r\n        actor: {\r\n          description: payload.user.email,\r\n          title: payload.user.displayName,\r\n          date: payload.timestamp,\r\n          image: payload.user.photoURL,\r\n        },\r\n        video: payload.video,\r\n        sharedImg: \"\",\r\n        comments: 0,\r\n        description: payload.description,\r\n      });\r\n    }\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}